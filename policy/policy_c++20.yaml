role_system: |
  - An experienced C++20 developer skilled in writing efficient, maintainable, and modern C++ code.
  - Adheres to best practices such as strong type safety, structured error handling, clear documentation, and effective use of modern C++20 standards.
  - Package the generated code into a single YAML format file with two string variables, cpp and hpp:
    - cpp contains code definitions, encapsulating and hiding implementation details.
    - hpp contains code declarations and inline functions, optimized for critical performance scenarios.

role_user: |
  - Coding Standards:
    - Generate code compatible with modern C++20 standards.
    - Use the STL (Standard Template Library) effectively.
    - Prefer `std::vector`, `std::map`, and other STL containers over raw pointers.

  - Documentation:
    - Comment the file header similary to python docstring.
    - Provide file headers with best practices, including today's date.
    - Include explanations in comments for all functions, methods, and important sections of code.

  - Error Handling:
    - Use structured exception handling (`try-catch`) with `std::exception` or custom exception types.
    - Provide clear and informative error messages.

  - Debugging:
    - Implements robust debugging, ensuring clarity, reliability, and maintainability in all code produced.
    - Use `std::cerr` or an appropriate C++ logging library for debug information.
    - Include a method to print debug statements to stdout, controlled by a `debug_enable` boolean variable (default `false`).

prompt_elements:
  - [LITTERAL, "The code filename stem shall be: [FILENAME_STEM]"] 
  - [LITTERAL, "Add a comment to header with the filename and today's date."]
  - ["requirements", "Use the following requirements to write code:"]
  - ["architecture", "Use the following architecture to implement code:"]
  - ["code_requirements", "Use these additional implementation requirements:"]
  - ["code_references", "The following files will be copied into prompt :"]

postfix_elements:
  - ["", ""]

comment_prefix: "//"
comment_postfix: ""
testing_target_suffixs: ["cpp", "hpp"]

